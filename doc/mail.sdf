# $Id: mail.sdf,v 1.4 2000/11/21 20:51:19 iefbr14 Exp $
#
# >>Copyright::
# Copyright (c) 1996-1997, Drew Sullivan (agu@ss.org).
# You may distribute under the terms specified in the LICENSE file.
#
# >>History::
# -----------------------------------------------------------------------
# Date        Who     Change
# 1997-Sep-12 agu    Initial version
# -----------------------------------------------------------------------
#
!default MAIL_SERVER	CLIENT_SERVER
!default MAIL_SERVER_IP	CLIENT_SERVER_IP
!default MAIL_CLIENT 	CLIENT_PC
!default MAIL_USER   	'agu'
!default YEAR		"2000"

H1: Email

Email is broken down into two basic components.  The Client is
known as the MUA B<Message Usage Agent>, and the server is
the MTA B<Message Transport Agent>.  From an administration
point of view all we care about is the MTA.  As long as
mail is flowing all is well :-)

H2: How to test mail.

Here is how to test mail.  The following simple dialog shows the
conversation between a  SMTP client and server.  Since you can even
run this dialog by hand it is possible to fully test that everything
is working. 

The first step is telnet to the mail server.  It should respond
with a '220' banner.  All smtp messages are prefixed with a three
digit code followed by a human readable message.

E: % telnet [[MAIL_SERVER]] smtp
E: Trying [[MAIL_SERVER_IP]] ...
E: Connected to [[MAIL_SERVER]]
E: Escape character is '^]'.
E: 220 [[MAIL_SERVER]] ESMTP Postfix

Here are some of the commands you can use.

!block table
Command Arguement               Description
HELO    hostname                startup and give your hostname
MAIL    FROM:<sender-address>   start transaction from sender
RCPT    TO:<recipient-address>  name recipient for message
DATA                            start text of mail message
RSET                            reset state, drop transaction
NOOP                            do nothing
QUIT                            close SMTP connection
!endblock

The normal sequence of events in sending a message is to state the
sender address with a MAIL FROM command, give the recipients with
as many RCPT TO commands as are required (one address per command)
and then to specify the mail message text after the DATA command.
Multiple messages may be specified.  End the last one with a QUIT.

Now lets feed it a message.

E: HELO [[MAIL_CLIENT]]
E: 250 [[MAIL_SERVER]] Hello [[MAIL_CLIENT]]
E: MAIL FROM:<[[MAIL_USER]]@[[MAIL_CLIENT]]>
E: 250 <[[MAIL_USER]]@[[MAIL_CLIENT]]> ... Sender Okay
E: RCPT TO:<[[MAIL_USER]]@[[MAIL_SERVER]]>
E: 250 <[[MAIL_USER]]@[[MAIL_SERVER]]> ... Recipient Okay
E: DATA
E: 354 Enter mail, end with "." on a line by itself
E: From: god@heaven.com
E: Subject: test
E: 
E: Wow this message could have come from anyone.
E: .
E: 250 Mail accepted
E: quit
E: 221 [[MAIL_SERVER]] closing connection
E: Connection closed by foreign host.

Please note that any user can do this and hence it is very easy to
forge email.  When looking for forged mail, the important thing to look
for is the B<Received> line added by your site. This message header
is generated by each mail transport as it passes through that site. Just
remember that only your site's B<Received> line may be real.

E: From [[MAIL_CLIENT]]![[MAIL_USER]] Tue Aug  9 20:10:23 [[YEAR]
E: Return-Path: <[[MAIL_USER]]@[[MAIL_CLIENT]]>
E: Received: from [[MAIL_CLIENT]] by [[MAIL_SERVER]] with smtp (Smail3.1.28.1)
E: 	id m0qY1F3-00014IC; Tue, 9 Aug [[YEAR]] 20:10 EDT
E: Message-Id: <m0qY1F3-00014IC@[[MAIL_SERVER]]>
E: Date: Tue, 9 Aug [[YEAR]] 20:10 EDT
E: From: god@heaven.com
E: Subject: test
E: 
E: Wow this message could have come from anyone.
